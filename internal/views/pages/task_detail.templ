package pages

import (
	"fmt"
	"github.com/melihkorkmaz/gtd/internal/views/layouts"
	"github.com/melihkorkmaz/gtd/internal/views/partials"
)

templ TaskDetailPage(task partials.TaskCardInfo) {
	@layouts.Base(fmt.Sprintf("%s - GTD App", task.Title)) {
		<div class="card bg-base-100 shadow-xl">
			<div class="card-body">
				<div class="flex justify-between items-center mb-6">
					<h2 class="card-title text-2xl">{ task.Title }</h2>
					<div class="flex space-x-2">
						<a href="/tasks" class="btn btn-outline">
							Back to Tasks
						</a>
						<button class="btn btn-primary"
								hx-get={ fmt.Sprintf("/tasks/%s/edit", task.ID) }
								hx-target="#task-details"
								hx-swap="outerHTML">
							Edit Task
						</button>
					</div>
				</div>
				
				<div id="task-details" class="space-y-4">
					<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
						<div>
							<h3 class="font-bold text-lg">Details</h3>
							<div class="divider my-1"></div>
							
							<div class="flex flex-col space-y-2">
								<div>
									<span class="font-semibold">Status:</span>
									<div class={ fmt.Sprintf("badge badge-%s", partials.TaskStatusBadge(task.Status)) }>{ task.Status }</div>
								</div>
								
								<div>
									<span class="font-semibold">Created:</span>
									<span>{ task.CreatedAt.Format("Jan 02, 2006 3:04 PM") }</span>
								</div>
								
								if task.DueDate != nil {
									<div>
										<span class="font-semibold">Due:</span>
										<span>{ partials.FormatDate(task.DueDate) }</span>
									</div>
								}
								
								if len(task.Contexts) > 0 {
									<div>
										<span class="font-semibold">Contexts:</span>
										<div class="flex flex-wrap gap-1 mt-1">
											for _, context := range task.Contexts {
												<div class="badge badge-primary">{ context }</div>
											}
										</div>
									</div>
								}
								
								if len(task.Tags) > 0 {
									<div>
										<span class="font-semibold">Tags:</span>
										<div class="flex flex-wrap gap-1 mt-1">
											for _, tag := range task.Tags {
												<div class="badge badge-secondary">{ tag }</div>
											}
										</div>
									</div>
								}

								if task.ProjectID != "" {
									<div>
										<span class="font-semibold">Project:</span>
										<a href={ templ.SafeURL(fmt.Sprintf("/projects/%s", task.ProjectID)) } class="link link-primary">
											View Project
										</a>
									</div>
								}
							</div>
						</div>
						
						<div>
							<h3 class="font-bold text-lg">Description</h3>
							<div class="divider my-1"></div>
							<div class="prose">
								<p>{ task.Description }</p>
							</div>
						</div>
					</div>
					
					<div class="divider"></div>
					
					<div class="flex justify-between">
						<div>
							if task.Status == "inbox" {
								<div class="dropdown">
									<label tabindex="0" class="btn m-1">Process Task</label>
									<ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
										<li>
											<button hx-put={ fmt.Sprintf("/api/tasks/%s/next", task.ID) }
												   hx-headers='{"Content-Type": "application/json"}'
												   hx-swap="none"
												   hx-trigger="click">
												Mark as Next Action
											</button>
										</li>
										<li>
											<button hx-put={ fmt.Sprintf("/api/tasks/%s/waiting", task.ID) }
												   hx-headers='{"Content-Type": "application/json"}'
												   hx-swap="none"
												   hx-trigger="click">
												Mark as Waiting For
											</button>
										</li>
										<li>
											<button hx-put={ fmt.Sprintf("/api/tasks/%s/someday", task.ID) }
												   hx-headers='{"Content-Type": "application/json"}'
												   hx-swap="none" 
												   hx-trigger="click">
												Mark as Someday/Maybe
											</button>
										</li>
										<li>
											<button hx-put={ fmt.Sprintf("/api/tasks/%s/project", task.ID) }
												   hx-headers='{"Content-Type": "application/json"}'
												   hx-swap="none"
												   hx-trigger="click">
												Convert to Project
											</button>
										</li>
									</ul>
								</div>
							} else if task.Status != "done" {
								<button class="btn btn-success"
										hx-put={ fmt.Sprintf("/api/tasks/%s/done", task.ID) }
										hx-headers='{"Content-Type": "application/json"}'
										hx-swap="none"
										hx-trigger="click">
									Mark as Done
								</button>
							}
						</div>
						
						<button class="btn btn-outline btn-error"
								hx-delete={ fmt.Sprintf("/api/tasks/%s", task.ID) }
								hx-target="body"
								hx-push-url="/tasks"
								hx-confirm="Are you sure you want to delete this task?">
							Delete Task
						</button>
					</div>
				</div>
			</div>
		</div>
	}
}